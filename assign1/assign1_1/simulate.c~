/*
 * simulate.c
 *
 * Implement your (parallel) simulation here!
 */

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include "simulate.h"

void usleep(int);

typedef struct thread_info {
    int b, e, c, right_bound;
    double *t0, *t1, *t2;
} thread_info;

/* Add any global variables you may need. */


/* Add any functions you may need (like a worker) here. */

void getThreadInfo(thread_info * t) {
    printf("%d %d [%d]\n", t->b, t->e, t->c);
}

//Returns '0' when thread is done, otherwise number of remaining elements 
int threadDone(thread_info * t) {
    //getThreadInfo(t);
    return t->e - t->c;
}

//Returns '0' when thread is done, otherse total number remaining elements is returned
int allThreadsDone(thread_info * t, int n){
    int val = 0;
    for(int i = 0; i < n; i++) {
        val += threadDone(&t[i]);
    }
    return val;
}

void * worker(void * v) {
    thread_info * t = (thread_info *)v;
    
    while(1) {
    
        usleep(1);
        while(t->c < t->e) {
        
            t->t2[t->c] = 14;
        
        /*
            if(t->c != 0 && t->c != t->right_bound - 1) //normal
                *t->t2[t->c] = 2 * (*t->t1[t->c]) - *t->t0[t->c] + 0.2 * ( *t->t1[t->c - 1] - (2 * (*t->t1[t->c]) - *t->t1[t->c + 1] ));
            else if(t->c == 0) //left border case
                *t->t2[t->c] = 2 * (*t->t1[t->c]) - *t->t0[t->c] + 0.2 * ( 0 - (2 * (*t->t1[t->c]) - *t->t1[t->c + 1] ));
            else //right border case
                *t->t2[t->c] = 2 * (*t->t1[t->c]) - *t->t0[t->c] + 0.2 * ( *t->t1[t->c - 1] - (2 * (*t->t1[t->c]) - 0 ));
                
        */
            t->c += 1;

        }
    }
    return NULL;
}

/*
 * Executes the entire simulation.
 *
 * Implement your code here.
 *
 * i_max: how many data points are on a single wave
 * t_max: how many iterations the simulation should run
 * num_threads: how many threads to use (excluding the main threads)
 * old_array: array of size i_max filled with data for t-1
 * current_array: array of size i_max filled with data for t
 * next_array: array of size i_max. You should fill this with t+1
 */
double *simulate(const int i_max, const int t_max, const int num_threads,
        double *old_array, double *current_array, double *next_array) {
        
    int amt_per_thread = i_max / num_threads;
    int amt_leftover = i_max % num_threads;
    int t_current = 0;

    //Create arrays to store thread data & thread id's
    thread_info * t_info = calloc(num_threads, sizeof(thread_info));
    pthread_t * t_id = malloc(num_threads * sizeof(pthread_t));
    
    //Perpare t_info structs and create them
    for (int i=0; i<num_threads; i++) {
        t_info[i].t0 = old_array;
        t_info[i].t1 = current_array;
        t_info[i].t2 = next_array;
        t_info[i].b = i * amt_per_thread;
        t_info[i].c = t_info[i].b;
        t_info[i].right_bound = i_max;
        
        //Set each tread's end point
        if(i != (num_threads - 1)) {
            t_info[i].e = (i + 1) * amt_per_thread;
        } 
        else {
            t_info[i].e = (i + 1) * amt_per_thread + amt_leftover;
        }
    
        getThreadInfo(&t_info[i]);
    
        pthread_create(&t_id[i], NULL, &worker, (void *)(&t_info[i]));   
    }
    
    
    //    return current_array;
    
    int iii = 0;
    
    while(t_current < t_max) {
        
        if(!allThreadsDone(t_info, num_threads)) {
            printf("%d, All threads are done\n", iii);
            double * tmp_array = old_array;
            old_array = current_array;
            current_array = next_array;
            next_array = tmp_array;
    
            for(int i=0; i<num_threads; i++){
                t_info[i].c = t_info[i].b;
                t_info[i].t0 = old_array;
                t_info[i].t1 = current_array;
                t_info[i].t2 = next_array;
                
            }
            
            t_current++; iii++;
        }
    }
    
    /* You should return a pointer to the array with the final results. */
    return next_array;
}
